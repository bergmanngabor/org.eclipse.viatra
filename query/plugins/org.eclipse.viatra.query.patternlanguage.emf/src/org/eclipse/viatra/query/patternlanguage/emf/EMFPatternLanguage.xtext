/*******************************************************************************
 * Copyright (c) 2010-2012, Zoltan Ujhelyi, Istvan Rath and Daniel Varro
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *   Zoltan Ujhelyi - initial API and implementation
 *******************************************************************************/
grammar org.eclipse.viatra.query.patternlanguage.emf.EMFPatternLanguage with org.eclipse.viatra.query.patternlanguage.PatternLanguage

import "http://www.eclipse.org/emf/2002/Ecore" as ecore
import "http://www.eclipse.org/viatra/query/patternlanguage/PatternLanguage" as core
import "http://www.eclipse.org/xtext/xbase/Xbase" as xbase
import "http://www.eclipse.org/xtext/xbase/Xtype" as xtype
import "http://www.eclipse.org/xtext/common/JavaVMTypes" as types

import "http://www.eclipse.org/viatra/query/patternlanguage/emf/EMFPatternLanguage"

EMFPatternModel returns core::PatternModel:
	{PatternModel}
	('package' packageName = QualifiedName ';'?)?
	importPackages=VQLImportSection
	patterns+=Pattern*;
	
//@Override is only available after Xtext 2.11
VQLImportSection :
	{VQLImportSection}
	(
	packageImport+=PackageImport |
	patternImport+=PatternImport |
	importDeclarations+=XImportDeclaration
	)*
;
	
PackageImport:
	'import' 'epackage'? ePackage = [ecore::EPackage|STRING] ';'? ('as' alias=ID)?
;

PatternImport:
	'import' 'pattern'? pattern = [core::Pattern|QualifiedName] ';'?
;

//@Override is only available after Xtext 2.11
XImportDeclaration returns xtype::XImportDeclaration:
	'import' 'java' (
		(static?='static' extension?='extension'? importedType=[types::JvmDeclaredType|QualifiedName] '.' '*') 
		| importedType=[types::JvmDeclaredType|QualifiedName] 
		| importedNamespace=QualifiedNameWithWildcard) ';'?
;

//@Override is only available after Xtext 2.11
Constraint returns core::Constraint:
	CheckConstraint	| TypeCheckConstraint |
	CompareConstraint | PatternCompositionConstraint | PathExpressionConstraint // Copied from PatternLanguage
	| EClassifierConstraint                                 // Additions
;

EClassifierConstraint:
	type = Type  '(' var = VariableReference ')'
;

//@Override is only available after Xtext 2.11
Type returns core::EntityType:
	{ClassType}
	(metamodel=[PackageImport] '::' )? classname=[ecore::EClassifier]
;

//@Override is only available after Xtext 2.11
RefType returns core::RelationType:
	{ReferenceType}
	refname=[ecore::EStructuralFeature]
;

//@Override is only available after Xtext 2.11
LiteralValueReference returns core::ValueReference:
	NumberValue | StringValue | BoolValue 			//Copied from PatternLanguage 
	| EnumValue							//Additions
;

EnumValue:
	(enumeration = [ecore::EEnum])? '::' literal = [ecore::EEnumLiteral]
;
