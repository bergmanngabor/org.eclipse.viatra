/*******************************************************************************
 * Copyright (c) 2010-2017, Zoltan Ujhelyi, Istvan Rath and Daniel Varro
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *   Zoltan Ujhelyi - initial API and implementation
 *******************************************************************************/
grammar org.eclipse.viatra.query.patternlanguage.PatternLanguage with org.eclipse.xtext.xbase.Xbase

import "http://www.eclipse.org/viatra/query/patternlanguage/PatternLanguage"
//import "platform:/resource/org.eclipse.viatra.query.patternlanguage/model/PatternLanguage.ecore"
import "http://www.eclipse.org/xtext/xbase/Xbase" as xbase
import "http://www.eclipse.org/xtext/common/JavaVMTypes" as types
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

PatternModel:
	('package' packageName=QualifiedName)?
	patterns+=Pattern*;

Pattern:
	annotations+=Annotation*
	modifiers=Modifiers
	'pattern'
	name=ID
	'('
	(parameters+=Parameter (',' parameters+=Parameter)*)?
	')'
	'='?
	bodies+=PatternBody ('or' bodies+=PatternBody)*;

Annotation:
	'@'
	name=ID
	('(' parameters+=AnnotationParameter (',' parameters+=AnnotationParameter)* ')')?;

AnnotationParameter:
	name=ID '=' value=AnnotationValueReference;

Modifiers:
    {Modifiers}(
//injective?='injective' &
	private?='private'? &
	execution=ExecutionTypeModifier?
	);

enum ExecutionTypeModifier returns ExecutionType:
    search | incremental
;

enum ParameterDirectionModifier returns ParameterDirection:
    in | out
;

Parameter returns Variable:
    {Parameter}
    direction=ParameterDirectionModifier?
	name=ID
	(':' type=Type | ':' type=JavaType)?
;

VariableReference:
	aggregator?='#'? var = ID |
	aggregator?='#';


//These types are not meant to be written directly, just in the desc languages	
Type returns Type:
	{EntityType}
	typename=ID;

JavaType returns EntityType:
    {JavaType}
    'java' classRef=[types::JvmDeclaredType|QualifiedName]
;

//These types are not meant to be written directly, just in the desc languages
RefType returns Type:
	{RelationType}
	typename=ID;

PatternBody:
	{PatternBody}
	(name=ID)?
	'{'
	((constraints+=Constraint ';'))*
	'}';

Constraint:
    CheckConstraint | TypeCheckConstraint |
	CompareConstraint | PatternCompositionConstraint | PathExpressionConstraint;

TypeCheckConstraint:
    {TypeCheckConstraint} type = JavaType  '(' var = VariableReference ')'
;

PatternCompositionConstraint:
	{PatternCompositionConstraint} negative?='neg'? call=PatternCall;
	
	//'count' 'find' patternRef=[Pattern] '(' (parameters+=ValueReference (','
	//parameters+=ValueReference)*)? ')';
PatternCall:
	'find' patternRef=[Pattern|QualifiedName] transitive?='+'? '(' (parameters+=ValueReference (',' parameters+=ValueReference)*)? ')';

CompareConstraint:
	{CompareConstraint} leftOperand = ValueReference feature=CompareFeature rightOperand = ValueReference 
;

enum CompareFeature:
	equality = '==' | inequality = '!='
;

CheckConstraint:
	{CheckConstraint} 'check' '(' expression=XExpression ')';

PathExpressionConstraint:
	{PathExpressionConstraint} head=PathExpressionHead;

PathExpressionHead:
	{PathExpressionHead} type=Type '.' tail=PathExpressionTail '(' src=VariableReference ',' dst=ValueReference ')';

PathExpressionTail:
	{PathExpressionTail} type=RefType ('.' tail=PathExpressionTail)?;

ValueReference:
	LiteralValueReference | VariableValue | ComputationValue;

AnnotationValueReference returns ValueReference:
	ValueReference | ListValue
;

LiteralValueReference returns ValueReference:
	NumberValue | StringValue | BoolValue;

StringValue returns LiteralValueReference:
	{StringValue} value=STRING;

NumberValue returns LiteralValueReference:
    {NumberValue} value=XNumberLiteral
;

//@Override is only available after Xtext 2.11
XNumberLiteral returns xbase::XNumberLiteral :
     {xbase::XNumberLiteral} value=Number;


BoolValue: 
    value = XBooleanLiteral
;

//@Override is only available after Xtext 2.11
XBooleanLiteral returns xbase::XBooleanLiteral:
	{xbase::XBooleanLiteral} ('false' | 'FALSE' | isTrue?='true' | isTrue?="TRUE")
;

VariableValue:
	{VariableValue} value=VariableReference;

ListValue:
	{ListValue} '{' values+=ValueReference (',' values+=ValueReference)* '}';
	
ComputationValue:
	AggregatedValue | FunctionEvaluationValue;
	
FunctionEvaluationValue:
	{FunctionEvaluationValue} 'eval' '(' expression=XExpression ')';
	
AggregatedValue:
    // TODO aggregator should be QualifiedName
 	{AggregatedValue} aggregator=[types::JvmDeclaredType|ValidID] call=PatternCall;